// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"
)

// Router is an autogenerated mock type for the Router type
type Router struct {
	mock.Mock
}

// Delete provides a mock function with given fields: path, f
func (_m *Router) Delete(path string, f func(*fiber.Ctx) error) fiber.Router {
	ret := _m.Called(path, f)

	var r0 fiber.Router
	if rf, ok := ret.Get(0).(func(string, func(*fiber.Ctx) error) fiber.Router); ok {
		r0 = rf(path, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fiber.Router)
		}
	}

	return r0
}

// Get provides a mock function with given fields: path, f
func (_m *Router) Get(path string, f func(*fiber.Ctx) error) fiber.Router {
	ret := _m.Called(path, f)

	var r0 fiber.Router
	if rf, ok := ret.Get(0).(func(string, func(*fiber.Ctx) error) fiber.Router); ok {
		r0 = rf(path, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fiber.Router)
		}
	}

	return r0
}

// Group provides a mock function with given fields: prefix, f
func (_m *Router) Group(prefix string, f func(*fiber.Ctx) error) fiber.Router {
	ret := _m.Called(prefix, f)

	var r0 fiber.Router
	if rf, ok := ret.Get(0).(func(string, func(*fiber.Ctx) error) fiber.Router); ok {
		r0 = rf(prefix, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fiber.Router)
		}
	}

	return r0
}

// Post provides a mock function with given fields: path, f
func (_m *Router) Post(path string, f func(*fiber.Ctx) error) fiber.Router {
	ret := _m.Called(path, f)

	var r0 fiber.Router
	if rf, ok := ret.Get(0).(func(string, func(*fiber.Ctx) error) fiber.Router); ok {
		r0 = rf(path, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fiber.Router)
		}
	}

	return r0
}

// Put provides a mock function with given fields: path, f
func (_m *Router) Put(path string, f func(*fiber.Ctx) error) fiber.Router {
	ret := _m.Called(path, f)

	var r0 fiber.Router
	if rf, ok := ret.Get(0).(func(string, func(*fiber.Ctx) error) fiber.Router); ok {
		r0 = rf(path, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fiber.Router)
		}
	}

	return r0
}

// Serve provides a mock function with given fields:
func (_m *Router) Serve() {
	_m.Called()
}

// ServeWithGracefulShutdown provides a mock function with given fields:
func (_m *Router) ServeWithGracefulShutdown() {
	_m.Called()
}

// Use provides a mock function with given fields: f
func (_m *Router) Use(f func(*fiber.Ctx) error) fiber.Router {
	ret := _m.Called(f)

	var r0 fiber.Router
	if rf, ok := ret.Get(0).(func(func(*fiber.Ctx) error) fiber.Router); ok {
		r0 = rf(f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fiber.Router)
		}
	}

	return r0
}

type mockConstructorTestingTNewRouter interface {
	mock.TestingT
	Cleanup(func())
}

// NewRouter creates a new instance of Router. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRouter(t mockConstructorTestingTNewRouter) *Router {
	mock := &Router{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
